1.在出生点显示player
2.显示home
3.实现tank移动的‘特效’
4.实现tank的移动以及边界碰撞检测
#移动就是更新实例的rect 以便于在下一次update图像的时候实时更新tank的图片以形成动画的效果
	question ：a.移动时速度过快->为循环设置一个clock = pygame.time.Clock() 
					       clock.tick(60)#每秒钟60帧
		b.移动时有动画残留 ->需要定义Map 并在每一次循环的时候刷新一遍地图
		c.按W的时候player2也在动  ->需要设定判断条件判断当前应该归谁动
		d.在碰到边界之后tank就不能动了  ->需要使用到rect.bottom  rect.
5.在地图上显示障碍物
6.实现当tank碰到障碍物时停止移动
	question ：a.当障碍物也是tank时，会导致player直接不能移动的bug
		初步解决方法：在主循环函数里面，每一次按键之后，把player移出精灵组 然后再加入精灵组，
			       就可以让player能够移动 。（猜测是因为调用了move函数后 精灵的rect没有得到及时更新
		b.发现如果使用了精灵组的update()函数，并不能像remove然后add 这样有用
		（难道是update()不是更新精灵位置的函数？
		查阅大量资料（百度）  之后发现这么一句话 “默认的 update() 方法什么事情也没做 子类可以重写此方法，在每次刷新屏幕时，更新精灵位置”
		
	结论：remove + add可以实现精灵的位置刷新 并且可以不用重写update() 方法
7.实现bullet类并使我方坦克能射击子弹
	question : a.我方坦克并不能一边移动一边射击  ->将按键的判断条件由elif改成if
		b.每一个坦克的子弹只有一颗，只有在子弹超出游戏边界消失之后，才能射击下一颗子弹
			希望改成：每个坦克的射击只由时间间隔来限制  而不是个数
		实现方案：将坦克类和子弹类 完全分开
		逻辑：在玩家按下射击键的时候，判断设计时间间隔shoot_space是否达到，
			如果是，调用shoot函数 在函数中实例化一颗子弹，并将坦克此时的位置信息传给子弹，子弹自己调用自己的move()函数来移动
			如果不是，则射击失败

		bug:在射击完之后如果没有把could_shoot调回来 就会变成“穿甲弹”好像还有点牛逼	